import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

from aiogram_calendar import simple_cal_callback, SimpleCalendar
from states import BookingStates
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPES)
client = gspread.authorize(creds)
SPREADSHEET_ID = "130eO8Wl9ezkXEgbM6CnHt6C2k_lFKYKttbDqfN69mxg"
sheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ù–∞–∂–∞—Ç–∏–µ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@dp.message_handler(lambda message: message.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def start_booking(message: types.Message):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await BookingStates.waiting_for_name.set()

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è
@dp.message_handler(state=BookingStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", reply_markup=ReplyKeyboardRemove())
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=await SimpleCalendar().start_calendar()
    )
    await BookingStates.waiting_for_date.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
@router.callback_query()
async def process_date(callback: CallbackQuery, state: FSMContext):
    import logging
    logging.info("üîî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–∑–≤–∞–Ω")
    logging.info(f"üì© Callback data = {callback.data}")
    current_state = await state.get_state()
    logging.info(f"üìç FSM state = {current_state}")


    current_state = await state.get_state()
    if current_state != BookingStates.waiting_for_date.state:
        await callback.answer()
        return

    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback, callback.data)

    if not selected:
        await callback.answer()
        return

    await state.update_data(date=str(date))
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {date.strftime('%d.%m.%Y')}")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(BookingStates.waiting_for_phone)
    await callback.answer()


# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(state=BookingStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    await state.update_data(phone=phone)

    data = await state.get_data()
    name = data["name"]
    date = data["date"]

    summary = (
        f"–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–ò–º—è: {name}\n"
        f"–î–∞—Ç–∞: {date}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google –¢–∞–±–ª–∏—Ü—É
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    sheet.append_row([name, date, phone, timestamp])

    await message.answer(summary)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Å—Ç–µ—Ä—É
    await bot.send_message(-1002293928496, summary)  # –ì—Ä—É–ø–ø–∞
    await bot.send_message(300466559, summary)       # –õ–∏—á–Ω—ã–π ID

    await state.finish()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

